
This project is still Working In Progress.

 VulcanVG aims to be an implementation of the Khronos Group OpenVG 1.1 Lite 
provisional specification released in May 2020.

VulcanVG will contain both EGL and OpenVG implementation on Vulkan.
Also It would perform with Vulkan applications or stand-alone in using EGL, OpenVG.

  I.   Build
  II.  Testing
  III. Implementation status

I. Build
=============================
*Prerequisites:

 Vulkan driver and loader, SDK (Layers, Shader compiler etc...), 
 headers should be installed.
 Othe than that, since it's ANSI C99 should compile with any modern
 C compiler. jpeglib needs to be installed for example programs
 that use images.

* Compiling under UNIX systems:

    $ cd VulcanVG
    $ sh autogen.sh
    $ ./configure LIBS="-lGL -lGLU -lglut -ljpeg -lvulkan"
    $ make
 
* Compiling on Mac:

    No XCode project files provided yet. The easiest way is by just
    using gcc, in which case look under UNIX compiling section.

* Compiling on Windows:

    Not supported yet.         

* Compiling in mingw / cygwin environment:
 
    Might work just as fine as any UNIX-flavored system, but hasn't
    been tested yet.

II. Testing
=============================

   $ cd examples
   $ sh test_*

  There is no real testing suite yet. The example programs are there
  just to play with what the implementation can currently do, but
  can hardly provide any proper validation, since no reference images
  are provided. Here is a description of each example program and
  what features it highlights:

  * test_egl

    Initialize EGL and create context, surface, and fill the frame buffer.

  * test_vgu

    Constructs some path primitives using the VGU API.

  * test_tiger

    The most simple performance test. It draws the well known svg
    tiger using just simple stroke and fill of solid colors. It
    consists of 240 paths.

  * test_dash

    Shows different stroke dashing modes.

  * test_linear

    A rectangle drawn using 3-color linear gradient fill paint

  * test_radial

    A rectangle drawn using 3-color radial gradient fill paint

  * test_interpolate

    Interpolates between two paths - an apple and a pear.

  * test_image

    Images are drawn using VG_DRAW_IMAGE_MULTIPLY image mode to be
    multiplied with radial gradient fill paint.

  * test_pattern

    An image is drawn in multiply mode with an image pattern fill
    paint.

III. Implementation status
=============================

*OpenVG:
  
  Actually, not implemented any api yet.
  In drawing with OpenVG, We need to implement EGL at first.

* EGL:

  See src/EGL
  
